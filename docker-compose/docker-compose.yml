version: '3.4'

name: "footballapi"

services:
  football.api:
    container_name: "main"  
    image: ${DOCKER_REGISTRY-}footballapi
    build:
      context: ".."
      dockerfile: "Football.API/Dockerfile"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerCompose
      - ASPNETCORE_URLS=https://+:44367;http://+:8080
      - ASPNETCORE_HTTPS_PORT=44367
      - ASPNETCORE_HTTP_PORT=8080
      - ASPNETCORE_Kestrel__Certificates__Default__Password=1234
      - ASPNETCORE_Kestrel__Certificates__Default__Path=./Certificates/football.api.pfx
    ports:
      - "44367:44367"
      - "8080:8080"
    depends_on:
      - db
    networks:
      - ApplicationNetwork
  db:
    container_name: "sqlserver" 
    build: "../Football.Infrastructure/Docker"
    volumes:
      - mssqlsystem-data:/var/opt/mssql
      - mssqluser-data:/var/opt/sqlserver
    ports:
      - "1433:1433"
    networks:
      - ApplicationNetwork
  eslastic01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: "eslastic"
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - XPACK_SECURITY_ENABLED=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - ApplicationNetwork
  kibana:
    container_name: "kibana"
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    ports:
      - "5600-5601:5601"
    depends_on:
      - eslastic01
    environment:
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - XPACK_MONITORING_ENABLED=true
      - XPACK_MONITORING_COLLECTION_ENABLED=true
      - XPACK_SECURITY_ENABLED=true
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    networks:
     - ApplicationNetwork

volumes:
  data01:
    driver: local
  mssqlsystem-data:
    driver: local
  mssqluser-data:
    driver: local

# docker network create -d bridge my-bridge
networks:
  ApplicationNetwork:
    name: my-bridge
    external: true
